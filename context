import React, { createContext, useContext, useReducer, useEffect, useCallback } from 'react';
import type { ReactNode } from 'react';
import axios from 'axios'; // Axios không được sử dụng trực tiếp trong file này, nhưng thường có mặt trong các dự án React để gọi API.

// ✅ Định nghĩa URL cơ sở cho các hình ảnh được tải lên.
// Điều này rất quan trọng để xây dựng đường dẫn đầy đủ cho hình ảnh sản phẩm.
const UPLOADS_BASE_URL = 'http://localhost:3000/uploads/';

// ---
// INTERFACES (Các giao diện dữ liệu)
// ---

// Giao diện cho một sản phẩm khi nó được truyền vào hàm 'addItem'.
// Đây là thông tin tối thiểu cần thiết để thêm một sản phẩm vào giỏ hàng.
export interface ProductForCart {
  product_id: number; // ID duy nhất của sản phẩm (kiểu số).
  name: string;
  price: number; // Giá sản phẩm (kiểu số).
  discount_price?: number; // Giá khuyến mãi (có thể không có).
  thumbnail: string; // Tên file ảnh (ví dụ: 'sanpham1.jpg').
  brand?: string; // Tên thương hiệu (có thể không có).
}

// Giao diện cho một mặt hàng trong giỏ hàng khi nó được lưu trữ trong 'CartState'.
// Các trường này bao gồm thông tin chi tiết hơn và đường dẫn ảnh đầy đủ.
export interface CartItem {
  id: string; // ID duy nhất của mặt hàng trong giỏ hàng (thường là 'String(product_id)').
  product_id: number; // ID gốc của sản phẩm.
  name: string;
  price: number;
  discount_price?: number;
  quantity: number; // Số lượng sản phẩm này trong giỏ.
  image: string; // Đường dẫn ảnh đầy đủ (ví dụ: 'http://localhost:3000/uploads/sanpham1.jpg').
  thumbnail: string; // Tên file ảnh gốc.
  brand?: string;
}

// Giao diện cho toàn bộ trạng thái của giỏ hàng.
interface CartState {
  items: CartItem[]; // Mảng chứa tất cả các mặt hàng trong giỏ.
  total: number; // Tổng giá trị của tất cả các mặt hàng.
  itemCount: number; // Tổng số lượng sản phẩm (ví dụ: 2 áo + 1 quần = 3).
}

// Giao diện cho Context của giỏ hàng, bao gồm trạng thái và các hàm hành động.
interface CartContextType {
  state: CartState; // Trạng thái hiện tại của giỏ hàng.
  addItem: (product: ProductForCart) => void; // Thêm sản phẩm vào giỏ.
  removeItem: (id: string) => void; // Xóa sản phẩm khỏi giỏ theo 'id' của CartItem.
  updateQuantity: (id: string, quantity: number) => void; // Cập nhật số lượng sản phẩm theo 'id'.
  clearCart: () => void; // Xóa toàn bộ giỏ hàng.
}

// Tạo Context cho giỏ hàng.
const CartContext = createContext<CartContextType | null>(null);

// ✅ Định nghĩa các loại hành động mà 'cartReducer' có thể xử lý, cùng với kiểu dữ liệu 'payload' tương ứng.
type CartAction =
  | { type: 'ADD_ITEM'; payload: ProductForCart } // Payload là thông tin sản phẩm để thêm.
  | { type: 'REMOVE_ITEM'; payload: string } // Payload là 'id' của CartItem cần xóa.
  | { type: 'UPDATE_QUANTITY'; payload: { id: string; quantity: number } } // Payload là 'id' và số lượng mới.
  | { type: 'CLEAR_CART' } // Không có payload.
  | { type: 'SET_STATE'; payload: CartState }; // Payload là trạng thái giỏ hàng hoàn chỉnh (dùng khi tải từ localStorage).

// Hàm tính toán lại tổng số lượng và tổng tiền của giỏ hàng.
// Hàm này được gọi sau mỗi thay đổi để đảm bảo các giá trị luôn được cập nhật chính xác.
const calculateState = (items: CartItem[]): CartState => {
  // Tính tổng số lượng mặt hàng.
  const itemCount = items.reduce((sum, item) => sum + item.quantity, 0);
  // Tính tổng tiền, ưu tiên 'discount_price' nếu có.
  const total = items.reduce((sum, item) => {
    const itemPrice = item.discount_price || item.price;
    return sum + (itemPrice * item.quantity);
  }, 0);
  return { items, total, itemCount };
};

// ---
// CART REDUCER (Bộ xử lý trạng thái giỏ hàng)
// ---
// Reducer là một hàm thuần túy nhận vào trạng thái hiện tại và một hành động,
// sau đó trả về một trạng thái mới dựa trên hành động đó.
const cartReducer = (state: CartState, action: CartAction): CartState => {
  switch (action.type) {
    case 'ADD_ITEM': {
      // Tìm xem sản phẩm đã tồn tại trong giỏ hàng chưa (dựa trên 'product_id').
      const existingItem = state.items.find(item => item.product_id === action.payload.product_id);
      let updatedItems: CartItem[];

      if (existingItem) {
        // Nếu sản phẩm đã có, tăng số lượng của sản phẩm đó lên 1.
        updatedItems = state.items.map(item =>
          item.product_id === action.payload.product_id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      } else {
        // Nếu sản phẩm chưa có, thêm nó vào giỏ hàng với số lượng là 1.
        // ✅ TẠO một đối tượng 'CartItem' hoàn chỉnh từ 'ProductForCart'.
        updatedItems = [...state.items, {
          id: String(action.payload.product_id), // Chuyển 'product_id' thành chuỗi để làm 'id' duy nhất trong giỏ.
          product_id: action.payload.product_id,
          name: action.payload.name,
          price: Number(action.payload.price), // Đảm bảo là kiểu số.
          discount_price: action.payload.discount_price ? Number(action.payload.discount_price) : undefined, // Đảm bảo là kiểu số hoặc undefined.
          quantity: 1,
          thumbnail: action.payload.thumbnail, // Lưu tên file ảnh gốc.
          image: `${UPLOADS_BASE_URL}${action.payload.thumbnail}`, // Tạo đường dẫn ảnh đầy đủ.
          brand: action.payload.brand, // Lưu thông tin thương hiệu nếu có.
        }];
      }
      // Sau khi cập nhật danh sách các mặt hàng, tính toán lại và trả về trạng thái mới.
      return calculateState(updatedItems);
    }

    case 'REMOVE_ITEM': {
      // ✅ Lọc bỏ mặt hàng khỏi danh sách dựa trên 'id' của CartItem.
      const updatedItems = state.items.filter(item => item.id !== action.payload);
      return calculateState(updatedItems);
    }

    case 'UPDATE_QUANTITY': {
      // Cập nhật số lượng của một mặt hàng cụ thể dựa trên 'id'.
      // ✅ Lọc bỏ các mặt hàng có số lượng <= 0 (để xóa chúng khỏi giỏ nếu số lượng về 0).
      const updatedItems = state.items.map(item =>
        item.id === action.payload.id
          ? { ...item, quantity: action.payload.quantity }
          : item
      ).filter(item => item.quantity > 0);
      return calculateState(updatedItems);
    }

    case 'CLEAR_CART':
      // Trả về trạng thái giỏ hàng rỗng.
      return { items: [], total: 0, itemCount: 0 };
      
    case 'SET_STATE': 
        // Đặt toàn bộ trạng thái giỏ hàng bằng payload được cung cấp (thường dùng khi tải từ localStorage).
        return action.payload;

    default:
      // Trả về trạng thái hiện tại nếu không có hành động nào khớp.
      return state;
  }
};

// ---
// CART PROVIDER (Component cung cấp giỏ hàng)
// ---
// Component này bọc các thành phần con của ứng dụng và cung cấp Context giỏ hàng cho chúng.
export const CartProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  // Khởi tạo state giỏ hàng bằng 'useReducer'.
  // Trạng thái ban đầu là một giỏ hàng trống.
  const [state, dispatch] = useReducer(cartReducer, { items: [], total: 0, itemCount: 0 });

  // **Đây là phần quan trọng nhất để duy trì giỏ hàng khi tải lại trang.**
  // useEffect này chạy một lần khi component được mount để tải dữ liệu giỏ hàng từ 'localStorage'.
  useEffect(() => {
    try {
      const savedCartState = localStorage.getItem('cartState'); // Lấy dữ liệu giỏ hàng đã lưu.
      if (savedCartState) {
        const parsedState = JSON.parse(savedCartState); // Phân tích cú pháp chuỗi JSON thành đối tượng JavaScript.
        
        // ✅ **Đảm bảo dữ liệu từ 'localStorage' được chuẩn hóa lại.**
        // Dữ liệu trong 'localStorage' được lưu dưới dạng chuỗi, nên các kiểu dữ liệu (số)
        // và các trường dẫn xuất (như 'image' URL) cần được khôi phục.
        const loadedItems: CartItem[] = parsedState.items.map((item: any) => ({
            ...item,
            product_id: Number(item.product_id), // Chuyển lại về kiểu số.
            price: Number(item.price), // Chuyển lại về kiểu số.
            quantity: Number(item.quantity), // Chuyển lại về kiểu số.
            id: String(item.product_id), // Tạo lại 'id' kiểu chuỗi (quan trọng cho các thao tác sau này).
            image: `${UPLOADS_BASE_URL}${item.thumbnail}`, // Tạo lại đường dẫn ảnh đầy đủ.
            // Đảm bảo các trường khác cũng có giá trị mặc định nếu chúng bị thiếu trong 'localStorage'.
            thumbnail: item.thumbnail || '',
            brand: item.brand || '',
            discount_price: item.discount_price ? Number(item.discount_price) : undefined,
        }));
        // Cập nhật state giỏ hàng bằng dữ liệu đã tải và chuẩn hóa.
        dispatch({ type: 'SET_STATE', payload: calculateState(loadedItems) });
      }
    } catch (error) { 
      console.error('Lỗi khi tải giỏ hàng từ localStorage:', error); 
      // Bạn có thể cân nhắc xóa 'localStorage.removeItem('cartState');' ở đây nếu dữ liệu bị lỗi vĩnh viễn.
    }
  }, []); // Mảng rỗng [] đảm bảo effect này chỉ chạy MỘT LẦN khi component được mount.

  // **Phần này đảm bảo giỏ hàng được lưu liên tục.**
  // useEffect này chạy mỗi khi 'state' của giỏ hàng thay đổi.
  useEffect(() => {
    // Lưu trữ toàn bộ state của giỏ hàng vào 'localStorage' dưới dạng chuỗi JSON.
    localStorage.setItem('cartState', JSON.stringify(state));
  }, [state]); // [state] đảm bảo effect này chạy mỗi khi 'state' thay đổi.

  // ✅ Các hàm điều khiển giỏ hàng, sử dụng 'useCallback' để tối ưu hóa hiệu suất.
  // 'useCallback' giúp ngăn các hàm này bị tạo lại không cần thiết khi component 'CartProvider' re-render,
  // điều này rất hữu ích khi các hàm này được truyền xuống các component con.
  const addItem = useCallback((product: ProductForCart) => dispatch({ type: 'ADD_ITEM', payload: product }), []);
  const removeItem = useCallback((id: string) => dispatch({ type: 'REMOVE_ITEM', payload: id }), []); 
  const updateQuantity = useCallback((id: string, quantity: number) => dispatch({ type: 'UPDATE_QUANTITY', payload: { id, quantity } }), []); 
  const clearCart = useCallback(() => dispatch({ type: 'CLEAR_CART' }), []);

  return (
    // Cung cấp trạng thái giỏ hàng và các hàm điều khiển cho tất cả các component con.
    <CartContext.Provider value={{ state, addItem, removeItem, updateQuantity, clearCart }}>
      {children}
    </CartContext.Provider>
  );
};

// ---
// HOOK 'useCart' (Hook tùy chỉnh để sử dụng giỏ hàng)
// ---
// Hook này cung cấp một cách tiện lợi để truy cập Context giỏ hàng trong các component chức năng.
export const useCart = (): CartContextType => {
  const context = useContext(CartContext);
  // Đảm bảo rằng hook này chỉ được sử dụng bên trong một component được bọc bởi 'CartProvider'.
  if (!context) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};