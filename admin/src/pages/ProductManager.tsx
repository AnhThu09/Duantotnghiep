import React, { useEffect, useState, useMemo, useCallback } from 'react';
import {
  Box, Button, Typography, Table, TableBody, TableCell,
  TableContainer, TableHead, TableRow, Paper, IconButton,
  Dialog, DialogTitle, DialogContent, TextField, DialogActions,
  InputAdornment, MenuItem, Snackbar, Alert, CircularProgress // Th√™m CircularProgress n·∫øu b·∫°n mu·ªën hi·ªÉn th·ªã loading
} from '@mui/material';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import SearchIcon from '@mui/icons-material/Search';
import axios from 'axios';

interface Product {
  product_id: number;
  name: string;
  description: string;
  price: number;
  quantity: number;
  thumbnail?: string;
  category_id: number;
  brand_id: number;
  // Th√™m c√°c tr∆∞·ªùng kh√°c n·∫øu c√≥, v√≠ d·ª•:
  // created_at?: string;
  // updated_at?: string;
}

interface Category {
  category_id: number;
  category_name: string;
}

interface Brand {
  brand_id: number;
  brand_name: string;
}

const BASE_URL = 'http://localhost:3000/api';
const UPLOADS_BASE_URL = 'http://localhost:3000/uploads/';

export default function ProductManager() {
  const [products, setProducts] = useState<Product[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [brands, setBrands] = useState<Brand[]>([]);
  const [openDialog, setOpenDialog] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null);
  const [searchTerm, setSearchTerm] = useState(''); // State cho t·ª´ kh√≥a t√¨m ki·∫øm
  const [loading, setLoading] = useState(true); // State ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i t·∫£i
  const [error, setError] = useState<string | null>(null); // State ƒë·ªÉ l∆∞u l·ªói

  const [formData, setFormData] = useState({
    name: '', description: '', price: '', quantity: '', thumbnail: null as File | null,
    previewUrl: '', category_id: '', brand_id: ''
  });
  const [alert, setAlert] = useState<{ open: boolean; message: string; severity: 'success' | 'error' | 'info' | 'warning' }>({ open: false, message: '', severity: 'success' });

  // ‚úÖ H√†m fetchProducts ƒë∆∞·ª£c s·ª≠a ƒë·ªïi ƒë·ªÉ nh·∫≠n tham s·ªë t√¨m ki·∫øm
  const fetchProducts = useCallback(async (searchQuery: string = '') => {
    setLoading(true);
    setError(null);
    try {
      // X√¢y d·ª±ng URL API v·ªõi tham s·ªë search
      const url = searchQuery
        ? `${BASE_URL}/products?search=${encodeURIComponent(searchQuery)}`
        : `${BASE_URL}/products`;

      const res = await axios.get(url);
      setProducts(res.data);
    } catch (err) {
      console.error('L·ªói khi l·∫•y s·∫£n ph·∫©m:', err);
      setError('Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i.');
      setProducts([]); // X√≥a d·ªØ li·ªáu c≈© n·∫øu c√≥ l·ªói
    } finally {
      setLoading(false);
    }
  }, []); // useCallback ƒë·ªÉ tr√°nh t·∫°o l·∫°i h√†m kh√¥ng c·∫ßn thi·∫øt

  // ‚úÖ useEffect ƒë·ªÉ t·∫£i s·∫£n ph·∫©m ban ƒë·∫ßu v√† khi searchTerm thay ƒë·ªïi
  useEffect(() => {
    fetchProducts(searchTerm); // T·∫£i s·∫£n ph·∫©m khi component mount v√† khi searchTerm thay ƒë·ªïi
  }, [searchTerm, fetchProducts]); // Dependency array bao g·ªìm searchTerm v√† fetchProducts

  // useEffect ƒë·ªÉ t·∫£i danh m·ª•c v√† th∆∞∆°ng hi·ªáu (ch·ªâ ch·∫°y m·ªôt l·∫ßn)
  useEffect(() => {
    const fetchCategoriesAndBrands = async () => {
      try {
        const [categoriesRes, brandsRes] = await Promise.all([
          axios.get(`${BASE_URL}/categories`),
          axios.get(`${BASE_URL}/brands`)
        ]);
        setCategories(categoriesRes.data);
        setBrands(brandsRes.data);
      } catch (err) {
        console.error('L·ªói khi t·∫£i danh m·ª•c ho·∫∑c th∆∞∆°ng hi·ªáu:', err);
        setAlert({ open: true, message: '‚ùå L·ªói khi t·∫£i danh m·ª•c ho·∫∑c th∆∞∆°ng hi·ªáu.', severity: 'error' });
      }
    };
    fetchCategoriesAndBrands();
  }, []);

  const handleOpenAdd = () => {
    setEditingProduct(null);
    setFormData({
      name: '', description: '', price: '', quantity: '', thumbnail: null,
      previewUrl: '', category_id: '', brand_id: ''
    });
    setOpenDialog(true);
  };

  const handleEdit = (product: Product) => {
    setEditingProduct(product);
    setFormData({
      name: product.name,
      description: product.description,
      price: product.price.toString(),
      quantity: product.quantity.toString(),
      thumbnail: null,
      previewUrl: product.thumbnail ? `${UPLOADS_BASE_URL}${product.thumbnail}` : '', // S·ª≠a ƒë∆∞·ªùng d·∫´n thumbnail
      category_id: String(product.category_id),
      brand_id: String(product.brand_id)
    });
    setOpenDialog(true);
  };

  const handleDelete = async (id: number) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën xo√° s·∫£n ph·∫©m n√†y?')) {
      try {
        await axios.delete(`${BASE_URL}/products/${id}`);
        setAlert({ open: true, message: 'üóëÔ∏è Xo√° s·∫£n ph·∫©m th√†nh c√¥ng', severity: 'info' });
        fetchProducts(searchTerm); // T·∫£i l·∫°i danh s√°ch sau khi x√≥a, gi·ªØ nguy√™n t·ª´ kh√≥a t√¨m ki·∫øm
      } catch (err) {
        console.error('L·ªói khi x√≥a s·∫£n ph·∫©m:', err);
        setAlert({ open: true, message: '‚ùå L·ªói khi xo√° s·∫£n ph·∫©m', severity: 'error' });
      }
    }
  };

  const handleCloseDialog = () => setOpenDialog(false);

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0] || null;
    const previewUrl = file ? URL.createObjectURL(file) : '';
    setFormData({ ...formData, thumbnail: file, previewUrl });
  };

  const handleSave = async () => {
    const categoryId = Number(formData.category_id);
    const brandId = Number(formData.brand_id);
    const priceNum = Number(formData.price);
    const quantityNum = Number(formData.quantity);

    if (!formData.name || !formData.description || isNaN(priceNum) || isNaN(quantityNum) || isNaN(categoryId) || isNaN(brandId)) {
      setAlert({ open: true, message: '‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin h·ª£p l·ªá (gi√°, s·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë).', severity: 'warning' });
      return;
    }

    // Ki·ªÉm tra n·∫øu l√† th√™m m·ªõi v√† kh√¥ng c√≥ thumbnail
    if (!editingProduct && !formData.thumbnail) {
      setAlert({ open: true, message: '‚ùå Vui l√≤ng ch·ªçn ·∫£nh s·∫£n ph·∫©m.', severity: 'error' });
      return;
    }

    const data = new FormData();
    data.append('name', formData.name);
    data.append('description', formData.description);
    data.append('price', String(priceNum)); // ƒê·∫£m b·∫£o g·ª≠i s·ªë
    data.append('quantity', String(quantityNum)); // ƒê·∫£m b·∫£o g·ª≠i s·ªë
    data.append('category_id', String(categoryId));
    data.append('brand_id', String(brandId));
    if (formData.thumbnail) {
      data.append('thumbnail', formData.thumbnail);
    } else if (editingProduct && editingProduct.thumbnail) {
      // N·∫øu ƒëang s·ª≠a v√† kh√¥ng ch·ªçn ·∫£nh m·ªõi, g·ª≠i l·∫°i t√™n ·∫£nh c≈©
      // Backend c·ªßa b·∫°n ƒë√£ x·ª≠ l√Ω tr∆∞·ªùng h·ª£p n√†y, n√™n kh√¥ng c·∫ßn g·ª≠i l·∫°i thumbnail n·∫øu kh√¥ng c√≥ file m·ªõi
      // data.append('thumbnail', editingProduct.thumbnail); // C√≥ th·ªÉ b·ªè d√≤ng n√†y n·∫øu backend x·ª≠ l√Ω t·ªët
    }


    try {
      if (editingProduct) {
        await axios.put(`${BASE_URL}/products/${editingProduct.product_id}`, data);
        setAlert({ open: true, message: '‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng', severity: 'success' });
      } else {
        await axios.post(`${BASE_URL}/products`, data);
        setAlert({ open: true, message: '‚úÖ Th√™m s·∫£n ph·∫©m th√†nh c√¥ng', severity: 'success' });
      }
      fetchProducts(searchTerm); // T·∫£i l·∫°i danh s√°ch sau khi l∆∞u
      handleCloseDialog(); // ƒê√≥ng dialog sau khi l∆∞u th√†nh c√¥ng
    } catch (err: any) { // Th√™m ki·ªÉu any cho err ƒë·ªÉ truy c·∫≠p response
      console.error('Save error:', err.response?.data || err.message);
      setAlert({ open: true, message: `‚ùå L·ªói khi l∆∞u s·∫£n ph·∫©m: ${err.response?.data?.error || err.message}`, severity: 'error' });
    }
  };

  // ‚úÖ Kh√¥ng c·∫ßn useMemo cho filteredProducts n·ªØa v√¨ API ƒë√£ filter
  // const filteredProducts = useMemo(() => {
  //   return products.filter((p) =>
  //     p.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
  //     p.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
  //     String(p.product_id).includes(searchTerm)
  //   );
  // }, [products, searchTerm]);

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
        <CircularProgress />
        <Typography sx={{ ml: 2 }}>ƒêang t·∫£i s·∫£n ph·∫©m...</Typography>
      </Box>
    );
<<<<<<< HEAD
  }, [products, searchTerm]);
  return (
    <Box>
        <style>{`
        /* Bu·ªôc n√∫t c√≥ chi·ªÅu r·ªông 120px */
        .MuiDialogActions-root button {
            width: 120px !important;
            min-width: 120px !important;
        }
        /* ƒê·∫£m b·∫£o ch√∫ng lu√¥n n·∫±m ngang */
        .MuiDialogActions-root {
            display: flex !important;
            flex-direction: row !important;
            flex-wrap: nowrap !important;
            justify-content: flex-end !important; /* ho·∫∑c center n·∫øu b·∫°n mu·ªën */
            align-items: center !important;
        }
      `}</style>
=======
  }

  if (error) {
    return (
      <Box sx={{ p: 3, textAlign: 'center' }}>
        <Typography color="error">{error}</Typography>
        <Button variant="contained" onClick={() => fetchProducts(searchTerm)} sx={{ mt: 2 }}>
          Th·ª≠ l·∫°i
        </Button>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
>>>>>>> 46df13841756a2d6566bd875c58dccb54aa00ad3
      <Typography variant="h5" gutterBottom>Qu·∫£n l√Ω S·∫£n ph·∫©m</Typography>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2, alignItems: 'center' }}>
        {/* TextField t√¨m ki·∫øm */}
        <TextField
          placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
          variant="outlined"
          size="small"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          onKeyDown={(e) => { // B·∫Øt s·ª± ki·ªán nh·∫•n Enter
            if (e.key === 'Enter') {
              fetchProducts(searchTerm); // G·ªçi h√†m fetchProducts khi nh·∫•n Enter
            }
          }}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <SearchIcon />
              </InputAdornment>
            ),
            // ‚úÖ N√∫t t√¨m ki·∫øm (c√≥ th·ªÉ b·ªè qua n·∫øu b·∫°n ch·ªâ mu·ªën t√¨m ki·∫øm khi nh·∫•n Enter)
            endAdornment: (
              <InputAdornment position="end">
                <IconButton onClick={() => fetchProducts(searchTerm)}>
                  <SearchIcon />
                </IconButton>
              </InputAdornment>
            ),
          }}
          sx={{ width: '300px' }}
        />
        <Button variant="contained" onClick={handleOpenAdd}>Th√™m s·∫£n ph·∫©m</Button>
      </Box>

      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>ID</TableCell>
              <TableCell>T√™n</TableCell>
              <TableCell>M√¥ t·∫£</TableCell>
              <TableCell>Gi√°</TableCell>
              <TableCell>S·ªë l∆∞·ª£ng</TableCell>
              <TableCell>·∫¢nh</TableCell>
              <TableCell>Danh m·ª•c</TableCell>
              <TableCell>Th∆∞∆°ng hi·ªáu</TableCell>
              <TableCell>H√†nh ƒë·ªông</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
<<<<<<< HEAD
            {filteredProducts.map((p) => (
              <TableRow key={p.product_id}>
                <TableCell>{p.product_id}</TableCell>
                <TableCell>{p.name}</TableCell>
                <TableCell>{p.description}</TableCell>
                <TableCell>{Number(p.price).toLocaleString()}‚Ç´</TableCell>
                <TableCell>{p.quantity}</TableCell>
                <TableCell>
  <Box
    sx={{
      width: 80,
      height: 80,
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      overflow: 'hidden',
      borderRadius: '8px',
      border: '1px solid #ddd',
      backgroundColor: '#f9f9f9',
    }}
  >
    {p.thumbnail ? (
      <img
      src={`${UPLOADS_BASE_URL}${p.thumbnail}`}
      alt={p.name}
      style={{ maxWidth: '100%', maxHeight: '100%', objectFit: 'contain' }}
      onError={(e) => {
        e.currentTarget.src = 'https://via.placeholder.com/80?text=No+Image';
      }}
    />
    
    ) : (
      <Typography variant="caption" color="text.secondary">Kh√¥ng c√≥ ·∫£nh</Typography>
    )}
  </Box>
</TableCell>

<TableCell>
        {categories.find(c => c.category_id === p.category_id)?.category_name || '‚Äî'}
      </TableCell>
                <TableCell>{brands.find(b => b.brand_id === p.brand_id)?.brand_name || '‚Äî'}</TableCell>
                 <TableCell align="right" sx={{ width: '120px', minWidth: '120px' }}> {/* ‚úÖ ƒê·∫∑t width cho cell h√†nh ƒë·ªông */}
                      <IconButton
                        aria-label="edit"
                        color="primary"
                        onClick={() => handleEdit(p)}
                        sx={{ mr: 1 }}
                      >
                        <EditIcon />
                      </IconButton>
                      <IconButton
                        aria-label="delete"
                        color="error"
                        onClick={() => handleDelete(p.product_id)}
                      >
                        <DeleteIcon />
                      </IconButton>
                    </TableCell>
=======
            {products.length === 0 ? (
              <TableRow>
                <TableCell colSpan={9} align="center">
                  Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o.
                </TableCell>
>>>>>>> 46df13841756a2d6566bd875c58dccb54aa00ad3
              </TableRow>
            ) : (
              products.map((p) => (
                <TableRow key={p.product_id}>
                  <TableCell>{p.product_id}</TableCell>
                  <TableCell>{p.name}</TableCell>
                  <TableCell>{p.description ? p.description.substring(0, 50) + (p.description.length > 50 ? '...' : '') : '‚Äî'}</TableCell>
                  {/* D√≤ng n√†y ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a */}
                  <TableCell>{Number(p.price).toLocaleString('vi-VN')}‚Ç´</TableCell>
                  <TableCell>{p.quantity}</TableCell>
                  <TableCell>
                    <Box
                      sx={{
                        width: 80,
                        height: 80,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        overflow: 'hidden',
                        borderRadius: '8px',
                        border: '1px solid #ddd',
                        backgroundColor: '#f9f9f9',
                      }}
                    >
                      {p.thumbnail ? (
                        <img
                          src={`${UPLOADS_BASE_URL}${p.thumbnail}`}
                          alt={p.name}
                          style={{ maxWidth: '100%', maxHeight: '100%', objectFit: 'contain' }}
                          onError={(e) => {
                            e.currentTarget.src = 'https://via.placeholder.com/80?text=No+Image'; // ·∫¢nh thay th·∫ø
                          }}
                        />

                      ) : (
                        <Typography variant="caption" color="text.secondary">Kh√¥ng c√≥ ·∫£nh</Typography>
                      )}
                    </Box>
                  </TableCell>

                  <TableCell>
                    {categories.find(c => c.category_id === p.category_id)?.category_name || '‚Äî'}
                  </TableCell>
                  <TableCell>{brands.find(b => b.brand_id === p.brand_id)?.brand_name || '‚Äî'}</TableCell>
                  <TableCell>
                    <IconButton onClick={() => handleEdit(p)}><EditIcon /></IconButton>
                    <IconButton color="error" onClick={() => handleDelete(p.product_id)}><DeleteIcon /></IconButton>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </TableContainer>

      {/* Dialog form */}
      <Dialog open={openDialog} onClose={handleCloseDialog} fullWidth maxWidth="sm">
        <DialogTitle>{editingProduct ? 'S·ª≠a s·∫£n ph·∫©m' : 'Th√™m s·∫£n ph·∫©m'}</DialogTitle>
        <DialogContent>
          <TextField
            fullWidth label="T√™n" margin="dense"
            value={formData.name}
            onChange={e => setFormData({ ...formData, name: e.target.value })}
          />
          <TextField
            fullWidth label="M√¥ t·∫£" margin="dense" multiline rows={3} // Cho ph√©p nhi·ªÅu d√≤ng
            value={formData.description}
            onChange={e => setFormData({ ...formData, description: e.target.value })}
          />
          <TextField
            fullWidth label="Gi√°" type="number" margin="dense"
            value={formData.price}
            onChange={e => setFormData({ ...formData, price: e.target.value })}
            inputProps={{ min: "0" }} // Ch·ªâ cho ph√©p gi√° tr·ªã kh√¥ng √¢m
          />
          <TextField
            fullWidth label="S·ªë l∆∞·ª£ng" type="number" margin="dense"
            value={formData.quantity}
            onChange={e => setFormData({ ...formData, quantity: e.target.value })}
            inputProps={{ min: "0" }} // Ch·ªâ cho ph√©p gi√° tr·ªã kh√¥ng √¢m
          />

          <TextField
            select
            fullWidth
            label="Danh m·ª•c"
            margin="dense"
            value={formData.category_id}
            onChange={(e) => setFormData({ ...formData, category_id: e.target.value })}
          >
            {categories.map((c) => (
              <MenuItem key={c.category_id} value={String(c.category_id)}>
                {c.category_name}
              </MenuItem>
            ))}
          </TextField>

          <TextField
            select
            fullWidth
            label="Th∆∞∆°ng hi·ªáu"
            margin="dense"
            value={formData.brand_id}
            onChange={e => setFormData({ ...formData, brand_id: e.target.value })}
          >
            {brands.map(b => (
              <MenuItem key={b.brand_id} value={String(b.brand_id)}>{b.brand_name}</MenuItem>
            ))}
          </TextField>

          <Box sx={{ mt: 2 }} component="label">
            <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>·∫¢nh s·∫£n ph·∫©m</Typography>
            <Box
              sx={{
                width: 100, height: 100, border: '1px dashed #ccc', display: 'flex',
                alignItems: 'center', justifyContent: 'center', position: 'relative',
                overflow: 'hidden', cursor: 'pointer', backgroundColor: '#fafafa'
              }}
            >
              {formData.previewUrl ? (
                <>
                  <img src={formData.previewUrl} alt="preview" style={{ width: '100%', height: '100%', objectFit: 'cover' }} />
                  <Button
                    size="small" color="error" sx={{
                      position: 'absolute', top: 2, right: 2, fontSize: 10, minWidth: 'unset', px: 1, py: '2px' // ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc n√∫t X
                    }}
                    onClick={e => {
                      e.stopPropagation(); // NgƒÉn ch·∫∑n m·ªü file input khi b·∫•m n√∫t X
                      setFormData({ ...formData, thumbnail: null, previewUrl: '' });
                    }}
                  >X</Button>
                </>
              ) : (
                <Typography variant="caption">Ch·ªçn ·∫£nh</Typography>
              )}
            </Box>
            <input type="file" hidden accept="image/*" onChange={handleImageChange} />
          </Box>
        </DialogContent>
        <DialogActions >
          <Button onClick={handleCloseDialog}>H·ªßy</Button>
          <Button onClick={handleSave} variant="contained">L∆∞u</Button>
        </DialogActions>
      </Dialog>

      <Snackbar open={alert.open} autoHideDuration={3000} onClose={() => setAlert({ ...alert, open: false })}>
        <Alert severity={alert.severity} onClose={() => setAlert({ ...alert, open: false })} sx={{ width: '100%' }}>
          {alert.message}
        </Alert>
      </Snackbar>
    </Box>
  );
}