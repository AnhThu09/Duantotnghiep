import React, { createContext, useContext, useReducer, useEffect } from 'react';

// Giả sử đây là URL cơ sở của API backend của bạn
const API_BASE_URL = 'http://localhost:3000/api/cart';

// Các interface (Product, CartItem) không thay đổi
export interface Product {
  id: number;
  name: string;
  price: number;
  discount_price?: number;
  image: string;
  description: string;
  category: string;
  brand: string;
}

export interface CartItem extends Product {
  quantity: number;
}

// Cập nhật CartState để bao gồm trạng thái loading và error
interface CartState {
  items: CartItem[];
  total: number;
  loading: boolean;
  error: string | null;
}

// Cập nhật CartAction để xử lý trạng thái mới và các phản hồi từ API
type CartAction =
  | { type: 'SET_LOADING'; payload: boolean }
  | { type: 'SET_ERROR'; payload: string | null }
  | { type: 'SET_CART_STATE'; payload: { items: CartItem[]; total: number } };

// Context được cập nhật để cung cấp trạng thái loading và error
const CartContext = createContext<{
  state: CartState;
  addItem: (product: Product) => Promise<void>;
  removeItem: (id: number) => Promise<void>;
  updateQuantity: (id: number, quantity: number) => Promise<void>;
  clearCart: () => Promise<void>;
  getItemCount: () => number;
} | null>(null);

// Reducer được đơn giản hóa để chỉ đặt trạng thái từ API
const cartReducer = (state: CartState, action: CartAction): CartState => {
  switch (action.type) {
    case 'SET_LOADING':
      return { ...state, loading: action.payload };
    case 'SET_ERROR':
      return { ...state, loading: false, error: action.payload };
    case 'SET_CART_STATE':
      return { ...state, loading: false, error: null, ...action.payload };
    default:
      return state;
  }
};

const calculateTotal = (items: CartItem[]): number => {
  return items.reduce((sum, item) => {
    const itemPrice = item.discount_price || item.price;
    return sum + (itemPrice * item.quantity);
  }, 0);
};

export const CartProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [state, dispatch] = useReducer(cartReducer, {
    items: [],
    total: 0,
    loading: true, // Bắt đầu với trạng thái loading vì chúng ta sẽ fetch dữ liệu lúc đầu
    error: null,
  });

  // Tải giỏ hàng từ API khi component được mount
  useEffect(() => {
    const fetchCart = async () => {
      dispatch({ type: 'SET_LOADING', payload: true });
      try {
        const response = await fetch(`${API_BASE_URL}`); // GET /cart
        if (!response.ok) {
          throw new Error('Failed to fetch cart.');
        }
        const cartItems: CartItem[] = await response.json();
        const total = calculateTotal(cartItems);
        dispatch({ type: 'SET_CART_STATE', payload: { items: cartItems, total } });
      } catch (err) {
        const error = err instanceof Error ? err.message : 'An unknown error occurred';
        dispatch({ type: 'SET_ERROR', payload: error });
      }
    };

    fetchCart();
  }, []);

  // Các hàm thao tác giờ đây sẽ gọi API
  const addItem = async (product: Product) => {
    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      const response = await fetch(`${API_BASE_URL}/items`, { // POST /cart/items
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ productId: product.id, quantity: 1 }),
      });
      if (!response.ok) throw new Error('Failed to add item.');
      const updatedCart: { items: CartItem[], total: number } = await response.json();
      dispatch({ type: 'SET_CART_STATE', payload: updatedCart });
    } catch (err) {
      const error = err instanceof Error ? err.message : 'An unknown error occurred';
      dispatch({ type: 'SET_ERROR', payload: error });
    }
  };

  const removeItem = async (id: number) => {
    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      const response = await fetch(`${API_BASE_URL}/items/${id}`, { // DELETE /cart/items/:id
        method: 'DELETE',
      });
      if (!response.ok) throw new Error('Failed to remove item.');
      const updatedCart: { items: CartItem[], total: number } = await response.json();
      dispatch({ type: 'SET_CART_STATE', payload: updatedCart });
    } catch (err) {
      const error = err instanceof Error ? err.message : 'An unknown error occurred';
      dispatch({ type: 'SET_ERROR', payload: error });
    }
  };

  const updateQuantity = async (id: number, quantity: number) => {
    if (quantity <= 0) {
      await removeItem(id);
      return;
    }
    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      const response = await fetch(`${API_BASE_URL}/items/${id}`, { // PUT /cart/items/:id
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ quantity }),
      });
      if (!response.ok) throw new Error('Failed to update quantity.');
      const updatedCart: { items: CartItem[], total: number } = await response.json();
      dispatch({ type: 'SET_CART_STATE', payload: updatedCart });
    } catch (err) {
      const error = err instanceof Error ? err.message : 'An unknown error occurred';
      dispatch({ type: 'SET_ERROR', payload: error });
    }
  };

  const clearCart = async () => {
    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      const response = await fetch(`${API_BASE_URL}`, { // DELETE /cart
        method: 'DELETE',
      });
      if (!response.ok) throw new Error('Failed to clear cart.');
      // API nên trả về một giỏ hàng trống
      const updatedCart: { items: CartItem[], total: number } = await response.json();
      dispatch({ type: 'SET_CART_STATE', payload: updatedCart });
    } catch (err) {
      const error = err instanceof Error ? err.message : 'An unknown error occurred';
      dispatch({ type: 'SET_ERROR', payload: error });
    }
  };
  
  const getItemCount = () => {
    return state.items.reduce((sum, item) => sum + item.quantity, 0);
  };

  return (
    <CartContext.Provider
      value={{
        state,
        addItem,
        removeItem,
        updateQuantity,
        clearCart,
        getItemCount,
      }}
    >
      {children}
    </CartContext.Provider>
  );
};

// Hook useCart không thay đổi
export const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};